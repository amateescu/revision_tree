<?php

/**
 * @file
 * Provides the revision tree API.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\revision_tree\Form\WorkspaceAssociationsRebuildForm;
use Drupal\revision_tree\SqlRevisionTreeHandler;

/**
 * Implements hook_entity_type_build().
 */
function revision_tree_entity_type_build(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['workspace']->setFormClass('associations', WorkspaceAssociationsRebuildForm::class);
  $entity_types['workspace']->setLinkTemplate('associations-form', '/admin/config/workflow/workspaces/manage/{workspace}/associations');

  foreach ($entity_types as $entity_type) {
    if ($entity_type->isRevisionable()) {
      // Add the required revision metadata key.
      $revision_metadata_keys = $entity_type->get('revision_metadata_keys');
      $revision_metadata_keys['revision_parent'] = 'revision_parent';
      $revision_metadata_keys['revision_merge_parent'] = 'revision_merge_parent';

      $entity_type->set('revision_metadata_keys', $revision_metadata_keys);

      $entity_type->setHandlerClass('revision_tree', SqlRevisionTreeHandler::class);

      // Add the 'ValidRevisionParent' constraint.
      $entity_type->addConstraint('ValidRevisionParent', []);
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function revision_tree_entity_base_field_info(EntityTypeInterface $entity_type) {
  // Add the 'revision_parent' and 'revision_merge_parent' fields.
  /** @var \Drupal\Core\Entity\ContentEntityType $entity_type */
  if ($entity_type->isRevisionable()) {
      $field_name = $entity_type->getRevisionMetadataKeys(FALSE)['revision_parent'];
      $base_field_definitions[$field_name] = BaseFieldDefinition::create('revision_reference')
        ->setLabel(t('Revision parent'))
        ->setDescription(t('Indicates the parent revision ID.'))
        ->setInternal(TRUE)
        ->setTranslatable(FALSE)
        ->setRevisionable(TRUE);

      $field_name = $entity_type->getRevisionMetadataKeys(FALSE)['revision_merge_parent'];
      $base_field_definitions[$field_name] = BaseFieldDefinition::create('revision_reference')
        ->setLabel(t('Revision merge parent'))
        ->setDescription(t('Indicates the merge parent revision ID.'))
        ->setInternal(TRUE)
        ->setTranslatable(FALSE)
        ->setRevisionable(TRUE);

    return $base_field_definitions;
  }
}

/**
 * Implements hook_entity_presave().
 */
function revision_tree_entity_presave(EntityInterface $entity) {
  $entity_type_manager = \Drupal::entityTypeManager();
  // Set the parent revision by default, except in the case where one was set
  // manually.
  if (!$entity->isNew() && $entity_type_manager->hasHandler($entity->getEntityTypeId(), 'revision_tree')) {
    $field_items = $entity->get($entity->getEntityType()->getRevisionMetadataKeys(FALSE)['revision_parent']);

    if (!$field_items->isEmpty() && $field_items->get(0)->isDirty()) {
      return;
    }

    /** @var \Drupal\Core\Entity\RevisionableStorageInterface $storage */
    $storage = $entity_type_manager->getStorage($entity->getEntityTypeId());
    $revision_tree = $entity_type_manager->getHandler($entity->getEntityTypeId(), 'revision_tree');
    $revision_tree->setParentRevisionId($entity, $storage->getLatestRevisionId($entity->id()));
  }
}

/**
 * Implements hook_entity_operation().
 */
function revision_tree_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
  $operations = [];

  /** @var \Drupal\workspaces\WorkspaceInterface $entity */
  if ($entity->getEntityTypeId() === 'workspace' && !$entity->isDefaultWorkspace()) {
    $operations['associations'] = [
      'title' => t('Rebuild associations'),
      'url' => $entity->toUrl('associations-form', ['query' => ['destination' => $entity->toUrl('collection')->toString()]]),
    ];
  }

  return $operations;
}
